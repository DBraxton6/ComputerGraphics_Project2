
class pts // class for manipulaitng and displaying pointclouds or polyloops in 3D 
  { 
    int maxnv = 16000;                 //  max number of vertices
    pt[] G = new pt [maxnv];           // geometry table (vertices)
    char[] L = new char [maxnv];             // labels of points
    vec [] LL = new vec[ maxnv];  // displacement vectors
    Boolean loop=true;          // used to indicate closed loop 3D control polygons
    int pv =0,     // picked vertex index,
        iv=0,      //  insertion vertex index
        dv = 0,   // dancer support foot index
        nv = 0,    // number of vertices currently used in P
        pp=1; // index of picked vertex
    int a = 0;
    int b = 0;
    boolean leftMove = true, rightMove = false;

  pts() {}
  pts declare() 
    {
    for (int i=0; i<maxnv; i++) G[i]=P(); 
    for (int i=0; i<maxnv; i++) LL[i]=V(); 
    return this;
    }     // init all point objects
  pts empty() {nv=0; pv=0; return this;}                                 // resets P so that we can start adding points
  pts addPt(pt P, char c) { G[nv].setTo(P); pv=nv; L[nv]=c; nv++;  return this;}          // appends a new point at the end
  pts addPt(pt P) { G[nv].setTo(P); pv=nv; L[nv]='f'; nv++;  return this;}          // appends a new point at the end
  pts addPt(float x,float y) { G[nv].x=x; G[nv].y=y; pv=nv; nv++; return this;} // same byt from coordinates
  pts copyFrom(pts Q) {empty(); nv=Q.nv; for (int v=0; v<nv; v++) G[v]=P(Q.G[v]); return this;} // set THIS as a clone of Q

  pts resetOnCircle(int k, float r)  // sets THIS to a polyloop with k points on a circle of radius r around origin
    {
    empty(); // resert P
    pt C = P(); // center of circle
    for (int i=0; i<k; i++) addPt(R(P(C,V(0,-r,0)),2.*PI*i/k,C)); // points on z=0 plane
    pv=0; // picked vertex ID is set to 0
    return this;
    } 
  // ********* PICK AND PROJECTIONS *******  
  int SETppToIDofVertexWithClosestScreenProjectionTo(pt M)  // sets pp to the index of the vertex that projects closest to the mouse 
    {
    pp=0; 
    for (int i=1; i<nv; i++) if (d(M,ToScreen(G[i]))<=d(M,ToScreen(G[pp]))) pp=i; 
    return pp;
    }
  pts showPicked() {show(G[pv],23); return this;}
  pt closestProjectionOf(pt M)    // Returns 3D point that is the closest to the projection but also CHANGES iv !!!!
    {
    pt C = P(G[0]); float d=d(M,C);       
    for (int i=1; i<nv; i++) if (d(M,G[i])<=d) {iv=i; C=P(G[i]); d=d(M,C); }  
    for (int i=nv-1, j=0; j<nv; i=j++) { 
       pt A = G[i], B = G[j];
       if(projectsBetween(M,A,B) && disToLine(M,A,B)<d) {d=disToLine(M,A,B); iv=i; C=projectionOnLine(M,A,B);}
       } 
    return C;    
    }

  // ********* MOVE, INSERT, DELETE *******  
  pts insertPt(pt P) { // inserts new vertex after vertex with ID iv
    for(int v=nv-1; v>iv; v--) {G[v+1].setTo(G[v]);  L[v+1]=L[v];}
     iv++; 
     G[iv].setTo(P);
     L[iv]='f';
     nv++; // increments vertex count
     return this;
     }
  pts insertClosestProjection(pt M) {  
    pt P = closestProjectionOf(M); // also sets iv
    insertPt(P);
    return this;
    }
  pts deletePicked() 
    {
    for(int i=pv; i<nv; i++) 
      {
      G[i].setTo(G[i+1]); 
      L[i]=L[i+1]; 
      }
    pv=max(0,pv-1); 
    nv--;  
    return this;
    }
  pts setPt(pt P, int i) { G[i].setTo(P); return this;}
  
  pts drawBalls(float r) {for (int v=0; v<nv; v++) show(G[v],r); return this;}
  pts showPicked(float r) {show(G[pv],r); return this;}
  pts drawClosedCurve(float r) 
    {
    fill(dgreen);
    for (int v=0; v<nv; v++) show(G[v],r*3);    
    fill(magenta);
    for (int v=0; v<nv-1; v++) stub(G[v],V(G[v],G[v+1]),r,r);  
    stub(G[nv-1],V(G[nv-1],G[0]),r,r);
    pushMatrix(); //translate(0,0,1); 
    scale(1,1,0.03);  
    fill(grey);
    for (int v=0; v<nv; v++) show(G[v],r*3);    
    for (int v=0; v<nv-1; v++) stub(G[v],V(G[v],G[v+1]),r,r);  
    stub(G[nv-1],V(G[nv-1],G[0]),r,r);
    popMatrix();
    return this;
    }
  pts set_pv_to_pp() {pv=pp; return this;}
  pts movePicked(vec V) { G[pv].add(V); return this;}      // moves selected point (index p) by amount mouse moved recently
  pts setPickedTo(pt Q) { G[pv].setTo(Q); return this;}      // moves selected point (index p) by amount mouse moved recently
  pts moveAll(vec V) {for (int i=0; i<nv; i++) G[i].add(V); return this;};   
  pt Picked() {return G[pv];} 
  pt Pt(int i) {if(0<=i && i<nv) return G[i]; else return G[0];} 

  // ********* I/O FILE *******  
 void savePts(String fn) 
    {
    String [] inppts = new String [nv+1];
    int s=0;
    inppts[s++]=str(nv);
    for (int i=0; i<nv; i++) {inppts[s++]=str(G[i].x)+","+str(G[i].y)+","+str(G[i].z)+","+L[i];}
    saveStrings(fn,inppts);
    };
  
  void loadPts(String fn) 
    {
    println("loading: "+fn); 
    String [] ss = loadStrings(fn);
    String subpts;
    int s=0;   int comma, comma1, comma2;   float x, y;   int a, b, c;
    nv = int(ss[s++]); print("nv="+nv);
    for(int k=0; k<nv; k++) 
      {
      int i=k+s; 
      //float [] xy = float(split(ss[i],",")); 
      String [] SS = split(ss[i],","); 
      G[k].setTo(float(SS[0]),float(SS[1]),float(SS[2]));
      L[k]=SS[3].charAt(0);
      }
    pv=0;
    };
 
  // Dancer
  void setPicekdLabel(char c) {L[pp]=c;}
  


  void setFifo() 
    {
    _LookAtPt.reset(G[dv],60);
    }              


  void next() {dv=n(dv);}
  int n(int v) {return (v+1)%nv;}
  int p(int v) {if(v==0) return nv-1; else return v-1;}
  
  pts subdivideDemoInto(pts Q) 
    {
    Q.empty();
    for(int i=0; i<nv; i++)
      {
      Q.addPt(P(P(G[i],G[p(i)]),G[i],P(G[i],G[n(i)])));
      //Q.addPt(P(G[i],G[n(i)])); 
      //...
      }
    return this;
    } 

  pts subdivideQuinticInto(pts Q) 
    {
    Q.empty();
    for(int i=0; i<nv; i++)
      {
      
      Q.addPt(B(G[p(i)],G[i],G[n(i)], 1.5)); 
      Q.addPt(F(G[p(i)], G[i], G[n(i)], G[n(n(i))], 1.5)); 
      //...
      }
    return this;
    }     
  
  void displaySkater() {
      
      if(showCurve) {fill(yellow); for (int j=0; j<nv; j++) caplet(G[j],6,G[n(j)],6); }
      pt[] B = new pt [nv];           // geometry table (vertices)
      pt[] H = new pt [nv];           //for body placement
      pt[] M = new pt [nv];          //for head placement
      for (int j=0; j<nv; j++) {
        B[j]=P(P(G[j], A(V(G[j], G[n(j)]), V(G[j], G[p(j)]))),V(0,0,-100));
        H[j]=P(G[j], V(0,0,60));
        M[j]=P(H[j], V(0,0, 35));
      }
      if(showPath) {
        fill(lime); for (int j=0; j<nv; j++) caplet(B[j],6,B[n(j)],6);
      } 
      if(showKeys) {fill(cyan); for (int j=0; j<nv; j+=4) arrow(B[j],G[j],3);}
      
      if(animating) {
        f=n(f);
        
        //left foot movement
        if(a>= 4) {
          leftMove = false;
        } else if(a<=-4) {
          leftMove = true;
        }
        
        if(leftMove) {
          a++;
        } else {
          a--;
        }
        
        
        //right foot movement
        if(b>= 4) {
          rightMove = false;
        } else if(b<=-4) {
          rightMove = true;
        }
        
        if(rightMove) {
          b++;
        } else {
          b--;
        }
      }  
      if(showSkater) {
        vec fwrd = V(G[f], G[n(f)]);
        vec up = V(0, 0, 1);
        vec out = cross(fwrd, up);
        vec normOut = U(out);
        vec down = cross(fwrd, out);
        
        int num = (f-a) % nv;
        int num2 = (f-b) % nv;
        if(num<0) {
          num=num+nv;
        }
        
        if(num2<0) {
          num2=num2+nv;
        }
        
        //body and head
        fill(yellow); caplet(G[f], 15, H[f], 20); //body
        fill(yellow); sphere(H[f], 20); //fill top of body-neck
        fill(yellow); sphere(G[f], 10); //fill bottom of body-pelvis
        fill(yellow); sphere(M[f], 15);
        
        //left side
        fill(yellow); caplet(P(B[num], 12, normOut), 5, P(G[f], 12, normOut), 10); //left leg
        fill(yellow); sphere(P(G[f], 12, normOut), 10); //left hip
        fill(yellow); sphere(P(B[num], 12, normOut), 10); //left foot
 
        //right side
        fill(yellow); caplet(P(B[num2], -12, normOut), 5, P(G[f], -12, normOut), 10); //right leg
        fill(yellow); sphere(P(G[f], -12, normOut), 10); //right hip
        fill(yellow); sphere(P(B[num2], -12, normOut), 10); //right foot
      }
      else if(showCoaster) {
        vec fwrd = V(G[f], G[n(f)]);
        vec up = V(0, 0, 1);
        vec out = cross(fwrd, up);
        vec normOut = U(out);
        fill(blue); sphere(B[f],20);
      }
      else {
        fill(red); arrow(B[f],G[f],20);
      } //
      
   }

        

} // end of pts class
